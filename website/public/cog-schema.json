{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Settings",
  "description": "Configuration structure for the Cocogitto tool.\n\n This struct defines the main configuration options for Cocogitto, including settings\n for version generation, changelog handling, commit conventions, hooks, and monorepo support.\n\n  **Example :**\n ```toml\n # Basic settings\n from_latest_tag = true\n ignore_merge_commits = true\n\n # Changelog settings\n [changelog]\n path = \"CHANGELOG.md\"\n template = \"remote\"\n\n # Git hooks\n [git_hooks.pre-commit]\n script = \"./scripts/pre-commit.sh\"\n\n # Monorepo configuration\n [packages.my-package]\n path = \"packages/my-package\"\n ```",
  "type": "object",
  "properties": {
    "branch_whitelist": {
      "description": "A list of glob patterns to allow bumping only on matching branches.",
      "type": "array",
      "default": [],
      "items": {
        "type": "string"
      }
    },
    "bump_profiles": {
      "description": "Custom bump profiles configurations.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/BumpProfile"
      },
      "default": {}
    },
    "changelog": {
      "description": "Changelog configuration.",
      "$ref": "#/$defs/Changelog",
      "default": {
        "authors": [],
        "owner": null,
        "package_template": null,
        "path": "CHANGELOG.md",
        "remote": null,
        "repository": null,
        "template": null
      }
    },
    "commit_types": {
      "description": "Custom commit types configuration.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/CommitConfig"
      },
      "default": {}
    },
    "disable_bump_commit": {
      "description": "Whether to create a bump commit or not.",
      "type": "boolean",
      "default": false
    },
    "disable_changelog": {
      "description": "Whether to generate a changelog or not during bump.",
      "type": "boolean",
      "default": false
    },
    "from_latest_tag": {
      "description": "Whether to only consider commits since the latest SemVer tag.",
      "type": "boolean",
      "default": false
    },
    "generate_mono_repository_global_tag": {
      "description": "Activate or deactivate global tag generation for mono-repository.",
      "type": "boolean",
      "default": true
    },
    "generate_mono_repository_package_tags": {
      "description": "Activate or deactivate package tag generation for mono-repository.",
      "type": "boolean",
      "default": true
    },
    "git_hooks": {
      "description": "Git hooks configuration.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/GitHook"
      },
      "default": {},
      "propertyNames": {
        "$ref": "#/$defs/GitHookType"
      }
    },
    "ignore_fixup_commits": {
      "description": "Silently ignore fixup commits",
      "type": "boolean",
      "default": true
    },
    "ignore_merge_commits": {
      "description": "A list of glob patterns to allow bumping only on matching branches.",
      "type": "boolean",
      "default": false
    },
    "monorepo_version_separator": {
      "description": "Specify the version separator character for mono-repository package's tags.",
      "type": [
        "string",
        "null"
      ],
      "default": null
    },
    "packages": {
      "description": "Monorepo packages configuration.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/MonoRepoPackage"
      },
      "default": {}
    },
    "post_bump_hooks": {
      "description": "Hooks that will be executed after a bump command in root dir.",
      "type": "array",
      "default": [],
      "items": {
        "type": "string"
      }
    },
    "post_package_bump_hooks": {
      "description": "Hooks that will be executed after a bump command in package dir.",
      "type": "array",
      "default": [],
      "items": {
        "type": "string"
      }
    },
    "pre_bump_hooks": {
      "description": "Hooks that will be executed before a bump command in root dir.",
      "type": "array",
      "default": [],
      "items": {
        "type": "string"
      }
    },
    "pre_package_bump_hooks": {
      "description": "Hooks that will be executed before a bump command in package dir.",
      "type": "array",
      "default": [],
      "items": {
        "type": "string"
      }
    },
    "scopes": {
      "description": "List of valid commit scopes.",
      "type": [
        "array",
        "null"
      ],
      "default": null,
      "items": {
        "type": "string"
      }
    },
    "skip_ci": {
      "description": "A \"skip-ci\" string to add to the commits when using the `bump` or `commit` commands.\n Default value is `[skip ci].",
      "type": "string",
      "default": "[skip ci]"
    },
    "skip_untracked": {
      "description": "Allows to perform bump even if there are untracked or uncommitted changes.",
      "type": "boolean",
      "default": false
    },
    "tag_prefix": {
      "description": "Set a tag prefix value for cocogitto. For instance if you have a `v`\n as a tag prefix, cocogitto will generate versions starting with `v` and\n commands like `cog changelog` will pick only those versions.",
      "type": [
        "string",
        "null"
      ],
      "default": null
    }
  },
  "additionalProperties": false,
  "$defs": {
    "AuthorSetting": {
      "title": "AuthorSetting",
      "description": "Configuration for mapping Git signatures to usernames.\n\n This struct defines the mapping between a Git commit signature (email address)\n and the corresponding username to use in changelog generation.\n\n  **Example :**\n ```toml\n [[changelog.authors]]\n signature = \"user@example.com\"\n username = \"githubuser\"\n ```",
      "type": "object",
      "properties": {
        "signature": {
          "description": "The Git commit signature (typically an email address)",
          "type": "string"
        },
        "username": {
          "description": "The username to display in changelogs",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": [
        "signature",
        "username"
      ]
    },
    "BumpProfile": {
      "title": "BumpProfile",
      "description": "A custom profile for configuring hooks that run before and after version bumps.\n\n Bump profiles allow defining different sets of hooks that can be selected\n when running bump commands.\n\n  **Example :**\n ```toml\n [bump_profiles.production]\n pre_bump_hooks = [\"./scripts/pre-release.sh\"]\n post_bump_hooks = [\"./scripts/post-release.sh\"]\n ```",
      "type": "object",
      "properties": {
        "post_bump_hooks": {
          "description": "List of hooks to run after bumping the version",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "pre_bump_hooks": {
          "description": "List of hooks to run before bumping the version",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Changelog": {
      "title": "Changelog",
      "description": "Configuration for changelog generation.\n\n This struct defines how the changelog should be generated,\n including templates, remote repository information, and author settings.\n\n  **Example :**\n ```toml\n [changelog]\n template = \"remote\"\n path = \"CHANGELOG.md\"\n remote = \"github.com\"\n owner = \"cocogitto\"\n repository = \"cocogitto\"\n ```",
      "type": "object",
      "properties": {
        "authors": {
          "description": "Author mappings for changelog generation",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/$defs/AuthorSetting"
          }
        },
        "owner": {
          "description": "Repository owner/organization name",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "package_template": {
          "description": "Template to use for package changelogs in monorepos",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "path": {
          "description": "Path where changelog file should be written",
          "type": "string",
          "default": "CHANGELOG.md"
        },
        "remote": {
          "description": "Remote Git repository URL (e.g. \"github.com\")",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "repository": {
          "description": "Repository name",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "template": {
          "description": "Template to use for changelog generation. Can be \"remote\", \"full_hash\" or a custom template path",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      },
      "additionalProperties": false
    },
    "CommitConfig": {
      "title": "CommitConfig",
      "description": "Configurations to create new conventional commit types or override behaviors of the existing ones.",
      "type": "object",
      "properties": {
        "bump_minor": {
          "description": "Allow for this commit type to bump the minor version.",
          "type": [
            "boolean",
            "null"
          ],
          "default": null
        },
        "bump_patch": {
          "description": "Allow for this commit type to bump the patch version.",
          "type": [
            "boolean",
            "null"
          ],
          "default": null
        },
        "changelog_title": {
          "description": "Define the title used in generated changelog for this commit type.",
          "type": [
            "string",
            "null"
          ]
        },
        "omit_from_changelog": {
          "description": "Do not display this commit type in changelogs.",
          "type": [
            "boolean",
            "null"
          ],
          "default": null
        },
        "order": {
          "description": "Specify a sort order attribute for this commit type.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "default": null,
          "minimum": 0
        }
      }
    },
    "GitHook": {
      "title": "GitHook",
      "description": "A GitHook can be defined either as a script string that will be executed directly,\n or as a path to a script file that will be executed",
      "anyOf": [
        {
          "description": "Direct script string that will be executed",
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "script"
          ]
        },
        {
          "description": "Path to a script file that will be executed",
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "path"
          ]
        }
      ]
    },
    "GitHookType": {
      "title": "GitHookType",
      "description": "Represents the different types of Git hooks that can be configured.\n\n This enum defines all the standard Git hook types that can be used\n in the configuration. Each variant corresponds to a specific Git hook\n that gets triggered at different points in Git's execution.\n\n  **Example :**\n ```toml\n [git_hooks.pre-commit]\n script = \"./scripts/pre-commit.sh\"\n ```",
      "type": "string",
      "enum": [
        "applypatch-msg",
        "pre-applypatch",
        "post-applypatch",
        "pre-commit",
        "pre-merge-commit",
        "pre-prepare-commit-msg",
        "commit-msg",
        "post-commit",
        "pre-rebase",
        "post-checkout",
        "post-merge",
        "pre-push",
        "pre-auto-gc",
        "post-rewrite",
        "sendemail-validate",
        "fsmonitor-watchman",
        "p4-changelist",
        "p4-prepare-changelist",
        "p4-postchangelist",
        "p4-pre-submit",
        "post-index-change"
      ]
    },
    "MonoRepoPackage": {
      "title": "MonoRepoPackage",
      "description": "Configuration for a package in a monorepo setup.\n\n This struct defines how a single package within a monorepo should be handled,\n including its location, included/excluded files, changelog settings, and bump behavior.\n\n  **Example :**\n ```toml\n [packages.my-package]\n path = \"packages/my-package\"\n include = [\"packages/my-package/**\"]\n ignore = [\"**/test/**\"]\n changelog_path = \"CHANGELOG.md\"\n public_api = true\n bump_order = 1\n ```",
      "type": "object",
      "properties": {
        "bump_order": {
          "description": "Ordering of packages in the changelog, this affect in which order\n packages will be bumped.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "default": null,
          "minimum": 0
        },
        "bump_profiles": {
          "description": "Custom profile to override `pre_bump_hooks`, `post_bump_hooks`.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/BumpProfile"
          },
          "default": {}
        },
        "changelog_path": {
          "description": "Where to write the changelog.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "ignore": {
          "description": "List of globs for paths to ignore, relative to\n the repository root dir.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "include": {
          "description": "List of globs for additional paths to include, relative to\n the repository root dir.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "path": {
          "description": "The package path, relative to the repository root dir.\n Used to scan commits and set hook commands current directory.",
          "type": "string",
          "default": ""
        },
        "post_bump_hooks": {
          "description": "Overrides `post_package_bump_hooks`.",
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "items": {
            "type": "string"
          }
        },
        "pre_bump_hooks": {
          "description": "Overrides `pre_package_bump_hooks`.",
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "items": {
            "type": "string"
          }
        },
        "public_api": {
          "description": "Bumping package marked as public api will increment\n the global monorepo version when using `cog bump --auto`.",
          "type": "boolean",
          "default": true
        }
      },
      "additionalProperties": false
    }
  }
}